<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos 6 rpmbuild]]></title>
    <url>%2Fblog%2F2019%2F03%2F23%2FCentos-6-rpmbuild%2F</url>
    <content type="text"><![CDATA[Centos 6 自定义打包 rpm需要的工具:1.Centos 62.rpm-build 3.系统普通用户 yum install rpm-build 简单的打包过程 1234567891011$ su libanglong$ echo "%_topdir /home/$(id -un)/rpmbuild" &gt;~/.rpmmacros #自定义制作目录$ mkdir -pv ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125; #创建基本需要目录# 基本需要目录可以使用一下命令获得$ rpmbuild --showrc | grep topdir# 编写spec文件$ vim ~/rpmbuild/SPECS/xxxx.spec # 具体写法可以百度，后面有简单说明,后面贴上mysq的简单实例$ rpmbuild -ba ~/rpmbuild/SPECS/xxxx.spec # 生成二进制文件和rpm包 rpmbuild 简单参数说明:rpmbuild [args] xxx.spec-ba 既生成 src.rpm 又生成二进制 rpm-bs 只生成 src 的 rpm-bb 只生二进制的 rpm-bp 执行到 pre-bc 执行到 build 段-bi 执行 install 段-bl 检测有文件没包含 可以进行简单的测试先 rpmbuild -bp ,再-bc 再-bi 如果没问题再执行 -ba 演示: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107### %define mysql_user mysql#名字为tar包的名字Name: mysql#版本号，一定要与tar包的一致哦Version: 5.6.23#释出号，也就是第几次制作rpmRelease: 1%&#123;?dist&#125; #软件包简介，最好不要超过50字符Summary: mysql 5.6.23 rpm#组名，可以通过less /usr/share/doc/rpm-4.8.0/GROUPS 选择合适组Group: System Environment/Daemons#许可，GPL还是BSD等License: GPLv2#可以写一个网址URL: https://github.com/ccbang/Packager: ccbangVendor: domain.comSource0: %&#123;name&#125;-%&#123;version&#125;.tar.gz# 这里特殊，取消不必要的依赖例如安装时会报错perl(lib:mtr_xxx)Autoreq: no#如果需要补丁，依次写#patch0: a.patchBuildRoot: %_topdir/BUILDROOT#制作过程中用到的软件包BuildRequires: gcc#软件运行需要的软件包，也可以指定最低版本如 bash &gt;= 1.1.1Requires: openssl,libunwind,libunwind-devel,gperftools,gperftools-libs,gperftools-devel#软件包描述，尽情的写吧%descriptionIt is a mysql 5.6 for txitech.com #描述内容### 2.The Prep section 准备阶段,主要目的解压source并cd进去#这个宏开始%prep#这个宏的作用静默模式解压并cd%setup -q#%%patch0 -p1 #如果需要在这打补丁，依次写### 3.The Build Section 编译制作阶段，主要目的就是编译%buildcmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \-DMYSQL_DATADIR=/usr/local/mysql/data \-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \-DWITH_SSL=yes \-DDEFAULT_CHARSET=utf8 \-DDEFAULT_COLLATION=utf8_general_ci \-DEXTRA_CHARSETS=utf8,gbk,gb2132 \-DENABLED_LOCAL_INFILE=1 \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DWITH_INNOBASE_STORAGE_ENGINE=1 \-DWITH_PARTITION_STORAGE_ENGINE=1 \-DWITH_DEBUG=0 \-DENABLE_DOWNLOADS=1#make后面的意思是：如果就多处理器的话make时并行编译make %&#123;?_smp_mflags&#125;### 4.Install section 安装阶段%install#先删除原来的安装的，如果你不是第一次安装的话rm -rf %&#123;buildroot&#125;#DESTDIR指定安装的目录，而不是真实的安装目录#INSTALL_ROOT也是指安装目录。例如phpmake install DESTDIR=%&#123;buildroot&#125;# %%pre #rpm安装前制行的脚本或者命令# %%post #安装后执行的脚本# %%preun #卸载前执行的脚本# %%postun #卸载后执行的脚本### 5.clean section 清理段,删除buildroot%cleanrm -rf %&#123;buildroot&#125;### 6.file section rpm包需要打包的文件%files#设定默认权限，如果下面没有指定权限，则继承默认%defattr (-,root,root,0755)#/etc/ #下面的内容要根据你在%&#123;rootbuild&#125;下生成的来写/usr/#/var/### 7.chagelog section 改变日志段%changelog* Fri Dec 29 2012 mysql 5.6.23 ccbang create- Initial version spec 参数说明： 12345678910111213141516171819202122232425262728293031323334353637Summary: rpm的内容概要Name: rpm的名称，后面可使用%&#123;name&#125;的方式引用Version: rpm的实际版本号，例如：1.2.5等，后面可使用%&#123;version&#125;引用Release: 发布序列号，例如:1等，标明第几次打包，后面可使用%&#123;release&#125;引用License: 软件授权方式，通常就是GPLGroup: 软件分组Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%&#123;source1&#125;、%&#123;source2&#125;引用Build Arch: 指编译的目标处理器架构，noarch标识不指定，但通常都是以/usr/lib/rpm/marcros中的内容为默认值BuildRoot: 这个是安装或编译时使用的“虚拟目录”，考虑到多用户的环境，一般定义为： %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root 或%&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-buildroot-%(%&#123;__id_u&#125; -n&#125; 该参数非常重要，因为在生成rpm的过程中，执行make install时就会把软件安装到上述的路径中，在打包的时候，同样依赖“虚拟目录”为“根目录”进行操作。 后面可使用$RPM_BUILD_ROOT 方式引用。URL: 软件的主页Packager: 打包者的信息Requires: 该rpm包所依赖的软件包名称，可以用&gt;=或&lt;=表示大于或小于某一特定版本，例如： libpng-devel &gt;= 1.0.20 &quot;&gt;=&quot;号两边需用空格隔开，而不同软件名称也用空格分开%description 软件的详细说明%prep 预处理脚本%setup 通常是从/usr/src/redhat/SOURCES里的包解压到/usr/src/redhat/BUILD/%&#123;name&#125;-%&#123;version&#125;中。 一般用%setup -c就可以了，但有两种情况：一就是同时编译多个源码包，二就是源码的tar包的名称与解压出来的目录不一致，此时，就需要使用-n参数指定一下了。%build 开始构建包,在/usr/src/redhat/BUILD目录中%install 开始把软件安装到虚拟的根目录中,这个很重要，因为如果这里的路径不对的话，则下面%files中寻找文件的时候就会失败。 可以使用：make DESTDIR=$RPM_BUILD_ROOT install 或者使用常规的系统命令 cp -rf filename $RPM_BUILD_ROOT/%clean 清理临时文件,注意区分$RPM_BUILD_ROOT和$RPM_BUILD_DIR： $RPM_BUILD_ROOT是指开头定义的BuildRoot，而$RPM_BUILD_DIR通常就是指/usr/src/redhat/BUILD，其中，前面的才是%files需要的。%pre rpm安装前执行的脚本%post rpm安装后执行的脚本%preun rpm卸载前执行的脚本%postun rpm卸载后执行的脚本 %preun %postun 的区别是前者在升级rpm包的时候会执行，后者在升级rpm包的时候不会执行%files 定义那些文件或目录会放入rpm中,下面的路径不是系统的绝对路径而是$RPM_BUILD_ROOT下的路径%defattr 指定安装rpm包后的文件属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755]]></content>
      <tags>
        <tag>Centos6</tag>
        <tag>rpmbuild</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有趣的Python next()]]></title>
    <url>%2Fblog%2F2019%2F03%2F06%2F%E6%9C%89%E8%B6%A3%E7%9A%84Python-next%2F</url>
    <content type="text"><![CDATA[能快速获得列表中的一个元素123&gt;&gt;&gt; data = [&#123;"name": "Python", "version": "3.7.2"&#125;, &#123;"name": "Django", "version": "2.2b1"&#125;]&gt;&gt;&gt; next((item for item in data if item["name"] == "Python"), &#123;&#125;)&#123;'name': 'Python', 'version': '3.7.2'&#125; 使用方法:next(iterator[, default])相当于class中的__next__获取iterator的一个元素。default： 当iterator耗尽时触发 StopIteration 会返回默认值 注意:如上例子，如果data中存在多个name为Python时，返回的是第一个]]></content>
      <tags>
        <tag>Python</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django2.2 with Watchman]]></title>
    <url>%2Fblog%2F2019%2F03%2F05%2FDjango2-2-with-watchman%2F</url>
    <content type="text"><![CDATA[runserver can now use Watchman to improve the performance of watching a large number of files for changes. Python3.7Python3.7 安装时遇到_ssl 模块没法编译成功，需要安装 openssl-1.0.2 版本以上下载 openssl 版本包后解压指定路径安装12345678910$ cd openssl-xxxx-dir$ ./config --prefix=/usr/local/openssl$ make &amp;&amp; make install# 如果你需要覆盖原来的openssl版本，请参考其他openssl安装教程# 安装Python3.7 指定openssl路径$ cd Python-3.7-dir$ ./configure --prefix=/usr/local/python37 --enable-shared --with-openssl=/usr/local/openssl$ make &amp;&amp; make install$ ln -s /usr/local/python37/bin/python3 /usr/sbin/ 安装完 Django 后调试时发现输出如下1234$ python3 manage.py runserverWatchman unavailable: pywatchman not installed.Watching for file changes with StatReloaderPerforming system checks… 需要安装watchman及pip install pywatchman Watchmandjango2.2 增加了对 watchman 的支持，更好进行调试12345678$ git clone https://github.com/facebook/watchman.git$ cd watchman$ git checkout v4.9.0 # the latest stable release# 使用 Centos6 的需要修改`Makefile.am` 参考https://github.com/facebook/watchman/issues/534$ ./autogen.sh$ ./configure$ make$ sudo make install 遇到的问题Watchman 安装遇到的问题:configure: error: *** A compiler with support for C++11 language features is required. 解决办法:1234567891011121314# 1. 安装yum centos-release-scl仓库:$ sudo yum install centos-release-scl# 启用 RHSCL 仓库:$ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms# 2. 安装devtoolset-7开发工具:$ sudo yum install devtoolset-7# 3. 使用devtoolset-7环境:$ scl enable devtoolset-7 bash# 4. 这里会进入新的开发环境，可以使用gcc --version查看，重新编译安装watchman,# Ctrl + d 可以退出当前环境]]></content>
      <tags>
        <tag>Django2.2</tag>
        <tag>Watchman</tag>
        <tag>Python3.7</tag>
        <tag>Centos6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2Fblog%2F2019%2F02%2F22%2Fhello-world%2F</url>
    <content type="text"></content>
      <tags>
        <tag>xxx</tag>
      </tags>
  </entry>
</search>
